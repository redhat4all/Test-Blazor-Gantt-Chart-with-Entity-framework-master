@page "/"

@using GanttEF.Models
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">

            <SfGantt ID="GanttExport" TValue="GanttData" Height="450px" Width="1000px" AllowReordering="true" AllowResizing="true"
                     HighlightWeekends="true" ShowColumnMenu="true" AllowFiltering="true" AllowSorting="true"
                     TreeColumnIndex="1" AllowSelection="true" GridLines="GridLine.Both"
                     Toolbar="@(new List<string>(){ "Add", "Cancel", "CollapseAll", "Delete", "Edit", "ExpandAll",
                        "NextTimeSpan", "PrevTimeSpan", "Search", "Update"
                    })">
                <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>

                <GanttColumns>

                    <GanttColumn Field=@nameof(GanttData.Id) Width="100" MinWidth="100" MaxWidth="110"></GanttColumn>
                    <GanttColumn Field=@nameof(GanttData.Name) HeaderText="Task Name" Width="250"></GanttColumn>
                    <GanttColumn Field=@nameof(GanttData.Sdate)></GanttColumn>
                    <GanttColumn Field=@nameof(GanttData.Edate)></GanttColumn>
                    <GanttColumn Field=@nameof(GanttData.Progress) Format="@NumberFormat"></GanttColumn>
                    <GanttColumn Field=@nameof(GanttData.Duration)></GanttColumn>
                    <GanttColumn Field=@nameof(GanttData.ParentId)></GanttColumn>

                    <GanttColumn Field=@nameof(GanttData.Predecessor)></GanttColumn>


                </GanttColumns>

                <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true"
                                   ShowDeleteConfirmDialog="true"
                                   NewRowPosition="RowPosition.Child"></GanttEditSettings>

                <GanttLabelSettings>
                    <LeftLabelTemplate>
                        <div class="e-right-label-inner-div" style="height:22px;margin-top:7px;">
                            <span class="e-label">@((context as GanttData).Progress)</span>
                        </div>
                    </LeftLabelTemplate>
                </GanttLabelSettings>

                <GanttTimelineSettings>
                    <GanttTopTierSettings Unit="TimelineViewMode.Week" Format="MMM dd, y"></GanttTopTierSettings>
                    <GanttBottomTierSettings Unit="TimelineViewMode.Day"></GanttBottomTierSettings>
                </GanttTimelineSettings>

                <GanttTaskFields Id="Id" Name="Name" StartDate="Sdate" EndDate="Edate" Duration="Duration" 
                                 Progress="Progress" ParentID="ParentId"
                                 Dependency="Predecessor" Child="SubTasks" Notes="Notes" ></GanttTaskFields>

            
            </SfGantt>
        </div>
    </div>
</div>


@code {

    public string NumberFormat = "N";

    // Implementing custom adaptor by extending the DataAdaptor class
    public class CustomAdaptor : DataAdaptor
    {
        MasterContext db = new MasterContext();
        // Performs data Read operation
        public override object Read(DataManagerRequest dm, string key = null)
        {
            IEnumerable<GanttData> DataSource = db.GanttData;
            int count = DataSource.Cast<GanttData>().Count();
            return dm.RequiresCounts ? new DataResult() { Result = DataSource, Count = count } : (object)DataSource;
        }

        // Performs CRUD operation
        public override object BatchUpdate(DataManager dm, object changedRecords, object addedRecords, object deletedRecords, string keyField, string key, int? dropIndex)
        {
            List<GanttData> addRecord = addedRecords as List<GanttData>;
            List<GanttData> changed = changedRecords as List<GanttData>;
            List<GanttData> deleteRecord = deletedRecords as List<GanttData>;

            if (changed != null)
            {
                for (var i = 0; i < changed.Count(); i++)
                {
                    var value = changed[i];
                    GanttData result = db.GanttData.Where(or => or.Id == value.Id).FirstOrDefault();
                    result.Id = value.Id;
                    result.Name = value.Name;
                    result.ProjectName = value.ProjectName;
                    result.Sdate = value.Sdate;
                    result.Edate = value.Edate;
                    result.Progress = value.Progress;
                    result.ParentId = value.ParentId;
                    result.BaselineStartDate = value.BaselineStartDate;
                    result.BaselineEndDate = value.BaselineEndDate;
                    result.Duration = value.Duration;
                    result.Predecessor = value.Predecessor;
                    result.Notes = value.Notes;
                    result.TaskType = value.TaskType;


                    db.SaveChanges();

                }
            }
            if (deleteRecord != null)
            {
                for (var i = 0; i < deleteRecord.Count(); i++)
                {
                    db.GanttData.Remove(db.GanttData.Where(or => or.Id == deleteRecord[i].Id).FirstOrDefault());
                    db.SaveChanges();
                }
            }
            if (addRecord != null)
            {
                for (var i = 0; i < addRecord.Count(); i++)
                {
                    db.GanttData.Add(addRecord[i] as GanttData);
                    db.SaveChanges();
                  
                }
            }
      
            return (new { addedRecords = addRecord, changedRecords = changed, deletedRecords = deleteRecord });
        }
    }
}


